---
- name: Run the cinder volume reference driver deployment
  hosts: cinder_storage_nodes
  gather_facts: true
  become: true
  vars:
    cinder_release: "2024.1"
    cinder_storage_network_interface: ansible_br_storage
    cinder_storage_network_interface_secondary: ansible_br_storage_secondary
    cinder_backend_name: "lvmdriver-1"
    custom_multipath: false
  handlers:
    - name: Restart cinder-volume and cinder-backup systemd services
      ansible.builtin.systemd:
        name: "{{ item }}"
        state: restarted
        daemon_reload: true
        enabled: true
      loop:
        - cinder-volume
        - cinder-volume-usage-audit
        - cinder-backup
        - iscsid.service
    - name: Reload cinder-volume-tgt systemd service
      ansible.builtin.systemd:
        name: "{{ item }}"
        state: reloaded
        daemon_reload: true
        enabled: true
      loop:
        - tgt.service
  tasks:
    - name: K8S Facts block
      delegate_to: "{{ groups['kube_control_plane'][0] }}"
      block:
        - name: Ensure python3-kubernetes is available
          ansible.builtin.package:
            name: python3-kubernetes
            state: present
            update_cache: true

        - name: Read cinder-etc secrets
          kubernetes.core.k8s_info:
            kind: Secret
            name: cinder-etc
            namespace: openstack
          register: _kubernetes_cinder_etc_secret

    - name: Install required packages
      ansible.builtin.package:
        name:
          - build-essential
          - git
          - open-iscsi
          - python3-venv
          - python3-dev
          - qemu-block-extra
          - qemu-utils
          - tgt
        state: present
        update_cache: true

    - name: Upgrade pip and install required packages
      ansible.builtin.pip:
        name:
          - pip
          - pymysql
          - "git+https://github.com/openstack/cinder@stable/{{ cinder_release }}"
          - "git+https://github.com/rackerlabs/cinder-rxt.git"
        state: present
        virtualenv: /opt/cinder
        virtualenv_command: python3 -m venv

    - name: Create the cinder system user
      ansible.builtin.user:
        name: cinder
        comment: Cinder system user
        shell: /bin/false
        system: true
        createhome: true
        home: /var/lib/cinder

    - name: Create the cinder system group
      ansible.builtin.group:
        name: cinder
        system: true

    - name: Create the cinder service directory
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        owner: cinder
        group: cinder
        mode: "0755"
      loop:
        - /var/lib/cinder/backup
        - /var/lib/cinder/tmp
        - /var/lib/cinder/volumes

    - name: Create symlink for the etc directory
      ansible.builtin.file:
        src: /opt/cinder/etc/cinder
        dest: /etc/cinder
        state: link
        owner: cinder
        group: cinder

    - name: Create the cinder systemd service units
      ansible.builtin.copy:
        src: "{{ item.src }}"
        dest: "{{ item.dest }}"
        owner: root
        group: root
        mode: "{{ item.mode | default('0644') }}"
      loop:
        - src: "{{ playbook_dir }}/templates/cinder-volume-usage-audit.timer"
          dest: /etc/systemd/system/cinder-volume-usage-audit.timer
        - src: "{{ playbook_dir }}/templates/cinder-volume-usage-audit.service"
          dest: /etc/systemd/system/cinder-volume-usage-audit.service
        - src: "{{ playbook_dir }}/templates/cinder-volume.service"
          dest: /etc/systemd/system/cinder-volume.service
        - src: "{{ playbook_dir }}/templates/cinder-backup.service"
          dest: /etc/systemd/system/cinder-backup.service
        - src: "{{ playbook_dir }}/templates/sudoers"
          dest: /etc/sudoers.d/cinder-volume
          mode: "0440"
      notify:
        - Restart cinder-volume and cinder-backup systemd services

    - name: Create the cinder-volume service configuration
      ansible.builtin.copy:
        content: "{{ _kubernetes_cinder_etc_secret.resources[0].data[item.src] | b64decode }}"
        dest: "{{ item.dest }}"
        owner: root
        group: root
        mode: "0644"
      loop:
        - src: "logging.conf"
          dest: /etc/cinder/logging.conf
        - src: "volume.filters"
          dest: /etc/cinder/volume.filters
      notify:
        - Restart cinder-volume and cinder-backup systemd services

    - name: Create the cinder-volume configuration stage file
      changed_when: false
      ansible.builtin.copy:
        content: "{{ _kubernetes_cinder_etc_secret.resources[0].data['cinder.conf'] | b64decode }}"
        dest: "/etc/cinder/cinder.conf.stage"
        owner: root
        group: root
        mode: "0644"

    - name: Replace the host in the cinder.conf.stage with the current Ansible FQDN in the stage file
      changed_when: false
      community.general.ini_file:
        path: "/etc/cinder/cinder.conf.stage"
        section: DEFAULT
        option: host
        value: "{{ ansible_fqdn }}"
        create: true

    - name: Ensure the backend configuration is set to our expected value
      changed_when: false
      community.general.ini_file:
        path: "/etc/cinder/cinder.conf.stage"
        section: DEFAULT
        option: enabled_backends
        value: "{{ cinder_backend_name }}"
        create: true

    - name: Create the cinder-volume configuration
      ansible.builtin.copy:
        src: "/etc/cinder/cinder.conf.stage"
        dest: "/etc/cinder/cinder.conf"
        owner: root
        group: root
        mode: "0644"
        remote_src: true
      notify:
        - Restart cinder-volume and cinder-backup systemd services

    - name: Set enabled backend fact
      set_fact:
        cinder_backend: |
          {% set rendered_backend = {} %}
          {% for backend in cinder_backend_name.split(',') %}
          {%   set default_backend = (_kubernetes_cinder_etc_secret.resources[0].data['backends.conf'] | b64decode | community.general.from_ini)[backend] %}
          {%   set network_interface = hostvars[inventory_hostname][cinder_storage_network_interface]['ipv4']['address'] | default(ansible_default_ipv4.address) %}
          {%   set _ = default_backend.__setitem__("target_ip_address", network_interface) %}
          {%   if ("lvm" in backend) and (custom_multipath | bool) %}
          {%       set network_interface_secondary = hostvars[inventory_hostname][cinder_storage_network_interface_secondary]['ipv4']['address'] %}
          {%       set _ = default_backend.__setitem__("iscsi_secondary_ip_addresses", network_interface_secondary) %}
          {%   endif %}
          {%   set _ = rendered_backend.__setitem__(backend, default_backend) %}
          {% endfor %}
          {{ rendered_backend }}

    - name: Create the cinder-volume backend configuration
      ansible.builtin.copy:
        content: "{{ cinder_backend | community.general.to_ini }}"
        dest: "/etc/cinder/backends.conf"
        owner: root
        group: root
        mode: "0644"
      notify:
        - Restart cinder-volume and cinder-backup systemd services

    - name: Replace exec path in rootwrap
      community.general.ini_file:
        path: /etc/cinder/rootwrap.conf
        section: DEFAULT
        option: "{{ item.key }}"
        value: "{{ item.value }}"
        create: true
      loop:
        - key: "exec_dirs"
          value: "/opt/cinder/bin,/sbin,/usr/sbin,/bin,/usr/bin,/usr/local/bin,/usr/local/sbin,/usr/lpp/mmfs/bin"
        - key: "filters_path"
          value: "/etc/cinder/rootwrap.d"
      notify:
        - Restart cinder-volume and cinder-backup systemd services

    - name: Create the cinder tgtd integration
      ansible.builtin.copy:
        content: |
          include /var/lib/cinder/volumes/*
        dest: /etc/tgt/conf.d/cinder.conf
        owner: root
        group: root
        mode: "0644"
      notify:
        - Reload cinder-volume-tgt systemd service

    - name: Remove cinder conf staging file
      ansible.builtin.file:
        path: /etc/cinder/cinder.conf.stage
        state: absent
